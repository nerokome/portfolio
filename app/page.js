'use client'
import Head from 'next/head';

import Navbar from "./components/Navbar";
import Hero from './components/Hero';
import About from './components/About';
import Skills from './components/Skills';
import Projects from './components/Projects';
import Contact from './components/Contact';
import { useRef, useEffect } from 'react';


export default function Home() {
  // StarfieldBackground component

  function StarfieldBackground() {
    const canvasRef = useRef(null);

    useEffect(() => {
      const canvas = canvasRef.current;
      const ctx = canvas.getContext('2d');
      let animationFrameId;
      let width = window.innerWidth;
      let height = window.innerHeight;
      canvas.width = width;
      canvas.height = height;

      const numStars = 200;
      const stars = [];

      function randomBetween(a, b) {
        return a + Math.random() * (b - a);
      }

      for (let i = 0; i < numStars; i++) {
        stars.push({
          x: randomBetween(0, width),
          y: randomBetween(0, height),
          z: randomBetween(0.1, 1),
          radius: randomBetween(0.2, 1.2),
          speed: randomBetween(0.1, 0.7)
        });
      }

      function draw() {
        ctx.clearRect(0, 0, width, height);
        for (let star of stars) {
          ctx.save();
          ctx.globalAlpha = star.z;
          ctx.beginPath();
          ctx.arc(star.x, star.y, star.radius, 0, 2 * Math.PI);
          ctx.fillStyle = '#fff';
          ctx.shadowColor = '#fff';
          ctx.shadowBlur = 8;
          ctx.fill();
          ctx.restore();

          star.y += star.speed * star.z * 1.5;
          if (star.y > height) {
            star.x = randomBetween(0, width);
            star.y = 0;
            star.z = randomBetween(0.1, 1);
            star.radius = randomBetween(0.2, 1.2);
            star.speed = randomBetween(0.1, 0.7);
          }
        }
        animationFrameId = requestAnimationFrame(draw);
      }

      draw();

      function handleResize() {
        width = window.innerWidth;
        height = window.innerHeight;
        canvas.width = width;
        canvas.height = height;
      }

      window.addEventListener('resize', handleResize);

      return () => {
        window.removeEventListener('resize', handleResize);
        cancelAnimationFrame(animationFrameId);
      };
    }, []);

    return (
      <canvas
        ref={canvasRef}
        style={{
          position: 'fixed',
          top: 0,
          left: 0,
          width: '100vw',
          height: '100vh',
          zIndex: 0,
          pointerEvents: 'none'
        }}
      />
    );
  }

  return (
    <div
      className='h-full min-h-screen
      bg-black
      bg-cover bg-center bg-fixed relative scroll-smooth'>
      <div className="absolute inset-0 bg-black opacity-10"></div>
      {/* Starfield Canvas */}
      <StarfieldBackground />
      <Head>
        <title>Nero portfolio</title>
        <meta name="description " content ="Generated by create next app"/>
        <link rel="icon" href="/favicon.ico"/>
      </Head>
      
      <header className="relative z-10">
        <Navbar/>
      </header>
      <main className="relative z-20">
        <div className=''>
          <Hero/>
          <About/>
          <Projects/>
          <Skills/>
          <Contact/>
        </div>
      </main>
    </div>
  );
}
